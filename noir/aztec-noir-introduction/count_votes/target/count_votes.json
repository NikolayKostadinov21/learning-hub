{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":3477085282788007996,"abi":{"parameters":[{"name":"commitments","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"all_votes","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"secrets","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"all_votes":[{"start":2,"end":22}],"commitments":[{"start":0,"end":2}],"secrets":[{"start":22,"end":24}]},"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"public"},"return_witnesses":[36,37,38,39,40,41,42,43,44,45],"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WZ6WrbQBSFvWVx4n3J5k22m6ZpapAsyZb+9VVsLNNCi0sRydsP0U1uQLnk1+SMQAPD9cG+B53P28yoWHgdi2Su+HExmeVklpJppXRZ6IrQR0IfC30i9KnQVaHPhD4XuiZ0XeiG0E2hW0K3he4I3RW6J3Q/pat8vTQukqmYp+LXKuanmJtiXoo5Keaj2EsxD8W+ir2vCu9HietPrvbnhpP2cu2V50XrZeS4zsZehtvAtz1/uwqcwPEDf7cMXDcKvGAdbsO1HTqeGzl7P3T3bHaFuy5bMr5kJjWuda4Nrk2uLa5trh2uXa49rv0U42vDjItAxte467LTmcvgzCWgVw3I76aA/YwSN/K0Cu8HmmcZ6FUH8hwY4DnIgGcF6NUA8hwa4DnMgOcR0KsJ5DkywHOUAc9joFcLyHNsgOc4A54nQK82kOfEAM9JBjxPgV4dIE/LAE8rA55VoFcXyHNqgOc0A55nQK8ekOfMAM9ZBjzPgV59IM+5AZ7zD3ii94Q3QAZfgAxMZh4AM9/mJPMQmPlrTjKPgJnvcpJ5DMz8LSeZJ8DM9znJbAEzf89J5ikw80NOMs+AmX/kJPMcmHkBzEzrsgp7XaSyv92jorMnOi+hPT7tS2kvRet/WrPS2TGdd9IZHZ0r0VkI7d9pz0n7JFrb99n3MsWURpF9aNAai9Yc9B9M/0n0G02/WfQdps80vceL1OtppO8rDLlu4jj6+y+24oO12e2sp9/xL+vwGP3f/zk80fMDjZ6RRs9Eo2eq0TPX6LnV6LnT6LnX6HnQ6HkZz00xKcOJHQAA","debug_symbols":"zZbLCoMwEEX/ZdYuTCaPxl8ppaStLYJE8VEo4r83tuhGcVMudJfJXA4ziwMz0C2/9I9zEe5VS9lxoLK6+q6oQqwGkunnr619mMq2801HmTDaJJSHW3za1IwJ3Ysyp0zF5ypsxJw1Wu5HhbB25kqhl7B04ykhKX6eRbvD9iwTXv7RqoxdVW3ireIFb3gf7+Q8irMrvMbiDRZvsfgDFu+geE6xeIHFSyyesXistYy1lrHWMtZaxlrLWGsV1lqFtVZhrVVIa2Px9E3hL2U+3VNTrw/X+byKZfeqv52YfQM=","file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"46":{"source":"use dep::std;\n\nglobal CANDIDATE_COUNT = 10;\nglobal VOTER_COUNT = 2;\n\nfn check_commitments(\n    // Each user's existing commitment to match\n    commitments: [Field; VOTER_COUNT],\n    // Each user's ballot secret\n    secrets: [Field; VOTER_COUNT],\n\tall_votes: [u32; VOTER_COUNT * CANDIDATE_COUNT],\n) {\n\tfor i in 0..VOTER_COUNT {\n\t\tlet mut transcript = [0; CANDIDATE_COUNT + 1];\n        transcript[0] = secrets[i];\n\t\tfor j in 0..CANDIDATE_COUNT {\n\t\t\t// Pedersen expects a transscript of Field elements, hence the cast\n\t\t\ttranscript[j + 1] = all_votes[i * CANDIDATE_COUNT + j] as Field;\n\t\t};\n\t\tassert (commitments[i] == std::hash::pedersen_hash(transcript));\n\t};\n}\n\nfn sum_votes(\n\tall_votes: [u32; VOTER_COUNT * CANDIDATE_COUNT]\n) -> [u32; CANDIDATE_COUNT] {\n\t// Sums of each \"column\" get aggregated into this array\n\tlet mut totals = [0; CANDIDATE_COUNT];\n\tfor i in 0..VOTER_COUNT {\n\t\tfor j in 0..CANDIDATE_COUNT {\n\t\t\ttotals[j] = totals[j] + all_votes[i * CANDIDATE_COUNT + j];\n\t\t}\n\t};\n\t// Return the aggreagated totals\n\ttotals\n}\n\n// Totals the votes for each candidate whilst checking that ballots\n// are consistent with their prior commitments. The contents of each\n// input array should follow a consistent user ordering.\nfn main(\n\t// The public ballot commitments made by each voter\n    commitments: pub [Field; VOTER_COUNT],\n\t// A flattened 2D array of each users' votes\n    // Note: unflattened 2D array aren't yet supported by the ABI\n\tall_votes: [u32; VOTER_COUNT * CANDIDATE_COUNT],\n\t// Each user's ballot secret\n    secrets: [Field; VOTER_COUNT],\n) -> pub [u32; CANDIDATE_COUNT] {\n\t// Enforce prior commitments to prevent censorship or tampering\n    check_commitments(commitments, secrets, all_votes);\n    // Reveal the final result\n    sum_votes(all_votes)\n}\n","path":"/root/learning/learning-hub/noir/aztec-noir-introduction/count_votes/src/main.nr"}},"names":["main"]}